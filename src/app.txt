diff --git a/src/App.js b/src/App.js
index 5fcac26..0633dbf 100644
--- a/src/App.js
+++ b/src/App.js
@@ -12,27 +12,27 @@ import starIcon from './star1.svg';
 class Post extends React.Component {
 
 
-  address = (addr, city, zip, pStyle) => {
+  address = (addr, city, zip) => {
     if (addr) {
-      return <address>Address: {addr}, {city}  {zip}</address>
+      return <address>{addr + ", " + city + "  " + zip}</address>
     } else {
       return
     }
   }
 
 
-  contact = (name, num, pStyle) => {
+  contact = (name, num) => {
     if (name) {
-      return <address>{name} : {num}</address>
+      return <address>{name + " : " + num}</address>
     } else {
       return
     }
   }
 
 
-  interviewDate = (interview, pStyle) => {
-    if (interview) {
-      return <p style={pStyle}>Interview Date: {interview}</p>
+  interviewDate = (interViewDate, interViewTime, pStyle) => {
+    if (interViewDate) {
+      return <p style={pStyle}>Interview Date: {interViewDate + " " + interViewTime}</p>
     } else {
       return
     }
@@ -46,7 +46,7 @@ class Post extends React.Component {
     }
   }
 
-  positionUrl = (url, pStyle) => {
+  positionUrl = (url) => {
     if (url) {
       return <a href={"https://www." + url} target={"_blank"}>{url}</a>
     } else {
@@ -122,7 +122,7 @@ class Post extends React.Component {
   
 
   
-  getDateString = (date) => {
+  getDateDifference = (date) => {
     let now = Date.now();
     let diff = Math.floor((now - date) / (1000*60*60*24));  // ms - sec - min - hours - days
     if (diff.isNaN) {
@@ -130,9 +130,22 @@ class Post extends React.Component {
     } else {
       return (`${diff} days ago`); 
     }
-    
   }
 
+  getTimeString = (date) => {
+    let hh = date.getHours();
+    let mm = date.getMinutes();
+    let tz = date.toTimeString().match(new RegExp("[A-Z](?!.*[\(])","g")).join('');
+
+    let tod = "AM";
+    if (hh > 12) { 
+      hh = hh - 12;
+      tod = "PM";
+    }
+    return (`${hh}:${mm} ${tod} (${tz})`);
+  }
+    
+
 
 
   render() { 
@@ -141,7 +154,7 @@ class Post extends React.Component {
      cNumber, cName, invwDate, pcDate, posTitle, posUrl, 
      salary, posDead, date} = this.props.p;
 
-     const pStyle = { textAlign: "center", margin: "0px", outline: "none"};
+     const pStyle = { margin: "0px", outline: "none", marginBlockStart: 0, marginBlockEnd: 0};
 
      
      const btn1Style = {
@@ -201,19 +214,19 @@ class Post extends React.Component {
          
           <details>
           <summary style={{outline: "none"}}>{compName}</summary>
-          {this.address(compSA, compCS, compZip, pStyle)}
-          {this.contact(cName, cNumber, pStyle)}
-          {this.interviewDate(Date(invwDate), pStyle)}
-          {this.phoneCallDate(Date(pcDate), pStyle)}
+          {this.address(compSA, compCS, compZip)}
+          {this.contact(cName, cNumber)}
+          {this.interviewDate(invwDate.toDateString(), this.getTimeString(invwDate), pStyle)}
+          {this.phoneCallDate(pcDate.toDateString(), pStyle)}
           </details>
           <hr width="10%"/>
           <details>
           <summary style={{outline: "none"}}>{posTitle}</summary>
-          {this.positionUrl(posUrl, pStyle)}
+          {this.positionUrl(posUrl)}
           {this.positionSalary(salary, pStyle)}
-          {this.positionDeadline(Date(posDead), pStyle)}
+          {this.positionDeadline(posDead.toDateString(), pStyle)}
           </details>
-          <p>{this.getDateString(date)}</p>
+          <p>{this.getDateDifference(date)}</p>
           </li>
           </div>
           );
@@ -260,13 +273,13 @@ class JobTracker extends React.Component {
         compZip  : 75229,
         cNumber  : "480-294-0824",
         cName    : "Melissa Stines",
-        invwDate : Date.parse("12/12/2019"),
-        pcDate   : Date.parse("01/13/2020"),
+        invwDate : new Date("12/12/2019 23:15:30"),
+        pcDate   : new Date("01/13/2020"),
         posTitle : "Position Title Here",
         posUrl   : "google.com",
         salary   : "$100k",
-        posDead  : Date.parse('Jan 31, 2020 23:15:30'),
-        date     : Date.parse('Aug 18, 2019 13:15:30')
+        posDead  : new Date('Jan 31, 2020 23:15:30'),
+        date     : new Date('Aug 18, 2019 13:15:30')
       },{
         id       : new Date() + 1,
         filter   : false,
@@ -277,13 +290,13 @@ class JobTracker extends React.Component {
         compZip  : 75229,
         cNumber  : "480-294-0824",
         cName    : "Melissa Stines",
-        invwDate : "12/12/2019",
-        pcDate   : "01/13/2020",
+        invwDate : new Date("12/12/2019"),
+        pcDate   : new Date("01/13/2020"),
         posTitle : "Position Title Here",
         posUrl   : "google.com",
         salary   : "$100k",
-        posDead  : Date.parse('Dec 19, 2019 23:15:30'),
-        date     : Date.parse('Aug 23, 2019 13:15:30')
+        posDead  : new Date('Dec 19, 2019 23:15:30'),
+        date     : new Date('Aug 23, 2019 13:15:30')
       },{
         id       : new Date() + 2,
         filter   : false,
@@ -294,13 +307,13 @@ class JobTracker extends React.Component {
         compZip  : 75229,
         cNumber  : "480-294-0824",
         cName    : "Melissa Stines",
-        invwDate : "12/12/2019",
-        pcDate   : "01/13/2020",
+        invwDate : new Date("12/12/2019"),
+        pcDate   : new Date("01/13/2020"),
         posTitle : "Position Title Here",
         posUrl   : "google.com",
         salary   : "$100k",
-        posDead  : Date.parse('May 1, 2020 23:15:30'),
-        date     : Date.parse('Aug 23, 2018 13:15:30')
+        posDead  : new Date('May 1, 2020 23:15:30'),
+        date     : new Date('Aug 23, 2018 13:15:30')
       }
       ]
 
@@ -327,13 +340,13 @@ class JobTracker extends React.Component {
       compZip: post.zipCode,
       cNumber: post.phone,
       cName: post.contactName,
-      invwDate: Date.parse(post.interviewDate),
-      pcDate: Date.parse(post.phoneCallDate),
+      invwDate: new Date(post.interviewDate),
+      pcDate:  new Date(post.phoneCallDate),
       posTitle: post.position,
       posUrl: post.website,
       salary: post.salary,
-      posDead: Date.parse(post.deadline),
-      date: Date.parse(now)
+      posDead: new Date(post.deadline),
+      date: now
     }
     this.setState({
       postList: [...this.state.postList, newPost ]
@@ -355,12 +368,12 @@ class JobTracker extends React.Component {
       compZip:  post.zipCode,
       cNumber:  post.phone,
       cName:    post.contactName,
-      invwDate: Date.parse(post.interviewDate),
-      pcDate:   Date.parse(post.phoneCallDate),
+      invwDate: new Date(post.interviewDate),
+      pcDate:   new Date(post.phoneCallDate),
       posTitle: post.position,
       posUrl:   post.website,
       salary:   post.salary,
-      posDead:  Date.parse(post.deadline),
+      posDead:  new Date(post.deadline),
       date:     post.date
     }; 
 
@@ -401,28 +414,28 @@ class JobTracker extends React.Component {
 
     return (
       <Router>
-      <div className="JobTracker">
-      <header>
-      <h1>Job Tracker</h1>
-      <Link style={linkStyle} to="/">Home</Link>  
-      <Link style={linkStyle} to="/form">Add Posting</Link>
-      </header>
-      <Route exact path="/" render={ props => (
-        <React.Fragment>
-        <ul className="Postings">
-        <Postings posts={this.state.postList} deletePost={this.deletePost}
-        filterPost={this.filterPost}
-        modifyPost={this.modifyPost} routeInfo={props}/>
-        </ul>
-        </React.Fragment>
-        )} />
-      <Route path="/form" render={ props => (
-        <Form routeInfo={props} addPost={this.addPost} />
-        )} />
-      <Route path="/reform" render={ props => (
-        <ModForm routeInfo={props} editPost={this.editPost} />
-        )} />
-      </div>
+        <div className="JobTracker">
+          <header>
+            <h1>Job Tracker</h1>
+            <Link style={linkStyle} to="/">Home</Link>  
+            <Link style={linkStyle} to="/form">Add Posting</Link>
+          </header>
+          <Route exact path="/" render={ props => (
+            <React.Fragment>
+              <ul className="Postings">
+                <Postings posts={this.state.postList} deletePost={this.deletePost}
+                      filterPost={this.filterPost}
+                      modifyPost={this.modifyPost} routeInfo={props}/>
+              </ul>
+            </React.Fragment>
+            )} />
+          <Route path="/form" render={ props => (
+            <Form routeInfo={props} addPost={this.addPost} />
+            )} />
+          <Route path="/reform" render={ props => (
+            <ModForm routeInfo={props} editPost={this.editPost} />
+            )} />
+        </div>
       </Router>
       );
   }
